From 584c0a8389835e072e54939c5fb4ee77d6d11175 Mon Sep 17 00:00:00 2001
From: Kenny Strawn <Kenny.Strawn@gmail.com>
Date: Thu, 26 Oct 2023 19:42:57 -0700
Subject: [PATCH 1/4] Port attempt 1

---
 .../rustc_target/src/spec/cryptos_base.rs     | 12 ++++++
 compiler/rustc_target/src/spec/mod.rs         |  1 +
 .../src/spec/x86_64_unknown_cryptos.rs        | 38 +++++++++++++++++++
 3 files changed, 51 insertions(+)
 create mode 100644 compiler/rustc_target/src/spec/cryptos_base.rs
 create mode 100644 compiler/rustc_target/src/spec/x86_64_unknown_cryptos.rs

diff --git a/compiler/rustc_target/src/spec/cryptos_base.rs b/compiler/rustc_target/src/spec/cryptos_base.rs
new file mode 100644
index 00000000000..b9539e43fba
--- /dev/null
+++ b/compiler/rustc_target/src/spec/cryptos_base.rs
@@ -0,0 +1,12 @@
+use crate::spec::{LinkerFlavor, LldFlavor, TargetOptions};
+ 
+pub fn opts() -> TargetOptions {
+    TargetOptions {
+        os: "cryptos".into(),
+        executables: true,
+        linker: Some("ld.lld".into()),
+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),
+        stack_probes: StackProbeType::Inline,
+        ..Default::default()
+    }
+}
\ No newline at end of file
diff --git a/compiler/rustc_target/src/spec/mod.rs b/compiler/rustc_target/src/spec/mod.rs
index f1c7513d885..065ae5382d3 100644
--- a/compiler/rustc_target/src/spec/mod.rs
+++ b/compiler/rustc_target/src/spec/mod.rs
@@ -66,6 +66,7 @@
 mod avr_gnu_base;
 pub use avr_gnu_base::ef_avr_arch;
 mod bpf_base;
+mod cryptos_base;
 mod dragonfly_base;
 mod freebsd_base;
 mod fuchsia_base;
diff --git a/compiler/rustc_target/src/spec/x86_64_unknown_cryptos.rs b/compiler/rustc_target/src/spec/x86_64_unknown_cryptos.rs
new file mode 100644
index 00000000000..fe3b24f2d4a
--- /dev/null
+++ b/compiler/rustc_target/src/spec/x86_64_unknown_cryptos.rs
@@ -0,0 +1,38 @@
+// Generic x86-64 target for bare-metal code - Floating point disabled
+//
+// Can be used in conjunction with the `target-feature` and
+// `target-cpu` compiler flags to opt-in more hardware-specific
+// features.
+
+use super::{Cc, CodeModel, LinkerFlavor, Lld, PanicStrategy};
+use super::{RelroLevel, SanitizerSet, StackProbeType, Target, TargetOptions};
+
+pub fn target() -> Target {
+    let opts = TargetOptions {
+        cpu: "x86-64".into(),
+        plt_by_default: false,
+        max_atomic_width: Some(64),
+        stack_probes: StackProbeType::X86,
+        position_independent_executables: true,
+        static_position_independent_executables: true,
+        relro_level: RelroLevel::Full,
+        linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),
+        linker: Some("rust-lld".into()),
+        features:
+            "-mmx,-sse,-sse2,-sse3,-ssse3,-sse4.1,-sse4.2,-3dnow,-3dnowa,-avx,-avx2,+soft-float"
+                .into(),
+        supported_sanitizers: SanitizerSet::KCFI | SanitizerSet::KERNELADDRESS,
+        disable_redzone: true,
+        panic_strategy: PanicStrategy::Abort,
+        code_model: Some(CodeModel::Kernel),
+        ..Default::default()
+    };
+    Target {
+        llvm_target: "x86_64-unknown-none-elf".into(),
+        pointer_width: 64,
+        data_layout: "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
+            .into(),
+        arch: "x86_64".into(),
+        options: opts,
+    }
+}
-- 
2.39.3 (Apple Git-145)

